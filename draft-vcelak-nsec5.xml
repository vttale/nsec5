<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC5155 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5155.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC2136 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC4648 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC6234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6234.xml">
<!ENTITY RFC3110 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3110.xml">
<!ENTITY RFC5114 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5114.xml">
<!ENTITY RFC6605 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6605.xml">
<!ENTITY RFC7748 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7748.xml">
<!ENTITY RFC8080 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8080.xml">
<!ENTITY RFC3447 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3447.xml">
<!ENTITY RFC7129 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7129.xml">
<!ENTITY I-D.gieben-nsec4 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.gieben-nsec4.xml">
<!ENTITY RFC6781 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6781.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-vcelak-nsec5-04" category="std">

  <front>
    <title abbrev="NSEC5">NSEC5, DNSSEC Authenticated Denial of Existence</title>

    <author initials="J." surname="Vcelak" fullname="Jan Vcelak">
      <organization>CZ.NIC</organization>
      <address>
        <postal>
          <street>Milesovska 1136/5</street>
          <city>Praha</city>
          <code>130 00</code>
          <country>CZ</country>
        </postal>
        <email>jan.vcelak@nic.cz</email>
      </address>
    </author>
    <author initials="S." surname="Goldberg" fullname="Sharon Goldberg">
      <organization>Boston University</organization>
      <address>
        <postal>
          <street>111 Cummington St, MCS135</street>
          <city>Boston</city>
          <code>MA 02215</code>
          <country>USA</country>
        </postal>
        <email>goldbe@cs.bu.edu</email>
      </address>
    </author>
    <author initials="D." surname="Papadopoulos" fullname="Dimitrios Papadopoulos">
      <organization>Boston University</organization>
      <address>
        <postal>
          <street>111 Cummington St, MCS135</street>
          <city>Boston</city>
          <code>MA 02215</code>
          <country>USA</country>
        </postal>
        <email>dipapado@bu.edu</email>
      </address>
    </author>
    <author initials="S." surname="Huque" fullname="Shumon Huque">
      <organization>Salesforce</organization>
      <address>
        <postal>
          <street>2550 Wasser Terr</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>shuque@gmail.com</email>
      </address>
    </author>

    <date year="2017"/>

    <area>Internet</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The Domain Name System Security (DNSSEC) Extensions introduced the
NSEC resource record (RR) for authenticated denial of existence and
the NSEC3 for hashed authenticated denial of existence.  The NSEC RR
allows for the entire zone contents to be enumerated if a server is
queried for carefully chosen domain names; N queries suffice to
enumerate a zone containing N names.  The NSEC3 RR adds domain-name
hashing, which makes the zone enumeration harder, but not impossible.
This document introduces NSEC5, which provides a
cryptographically-proven mechanism that prevents zone enumeration by
the use of verifiable random functions.  NSEC5 has the additional
advantage of not requiring private zone-signing keys to be present on
all authoritative servers for the zone, in contrast to online signing
schemes like NSEC3 white lies.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<section anchor="rationale" title="Rationale">

<t>NSEC5 provides an alternative mechanism authenticated denial of
existence for the DNS Security Extensions (DNSSEC). NSEC5 has two key
security properties.</t>

<t>First, NSEC5 protects the integrity of the zone contents even if an
adversary compromises one of the authoritative nameservers for the
zone.</t>

<t>Second, NSEC5 prevents offline zone enumeration, where an adversary
makes a small number of online DNS queries and then processes them
offline in order to learn all the names in a zone. Zone enumeration
can be used to identify routers, servers or other "things" that could
then be targeted in more complex attacks. An enumerated zone can also
be a source of probable e-mail addresses for spam, or as a "key for
multiple WHOIS queries to reveal registrant data that many registries
may have legal obligations to protect" <xref target="RFC5155"/>.</t>

<t>All other DNSSEC mechanisms for authenticated denial of existence
either fail to preserve integrity against a compromised nameserver, or
fail to prevent offline zone enumeration.  See the summary below.</t>

<texttable>
      <ttcol align='center'>Scheme</ttcol>
      <ttcol align='right'>Integrity vs network attacks?</ttcol>
      <ttcol align='right'>Integrity vs compromised nameserver?</ttcol>
      <ttcol align='right'>Prevents offline zone enumeration?</ttcol>
      <ttcol align='right'>Online crypto?</ttcol>
      <c>Unsigned</c>
      <c>NO</c>
      <c>NO</c>
      <c>YES</c>
      <c>NO</c>
      <c>NSEC</c>
      <c>YES</c>
      <c>YES</c>
      <c>NO</c>
      <c>NO</c>
      <c>NSEC3</c>
      <c>YES</c>
      <c>YES</c>
      <c>NO</c>
      <c>NO</c>
      <c>NSEC3-WL</c>
      <c>YES</c>
      <c>NO</c>
      <c>YES</c>
      <c>YES</c>
      <c>NSEC5</c>
      <c>YES</c>
      <c>YES</c>
      <c>YES</c>
      <c>YES</c>
</texttable>

<t>When offline signing with NSEC is used <xref target="RFC4034"/>, an NSEC chain of
all existing domain names in the zone is constructed. The chain is
made of RRs, where each RR represents two consecutive domain names in
canonical order present in the zone. The NSEC RRs are signed offline.
Non-existence of a name is proven by presenting a (precomputed) signed
NSEC RR which covers the name. Because the authoritative nameserver
need not know the private zone-signing key, the integrity of the zone
is ensured even if an adversary compromises the authoritative
nameserver.</t>

<t>On the other hand, the NSEC chain allows for easy enumeration of the
zone's contents by sequentially querying for the names immediately
following those in the most-recently retrieved NSEC record. N queries
suffice to enumerate a zone containing N names.  Several publicly
available network reconnaissance tools use NSEC records to launch
zone-enumeration attacks (e.g., <xref target="nmap-nsec-enum"/> <xref target="nsec3map"/>
<xref target="ldns-walk"/>).</t>

<t>When offline signing with NSEC3 is used, the original domain names in
the NSEC chain are replaced by their cryptographic hashes. Offline
signing ensures that NSEC provides integrity even in the face of a
compromised nameserver. NSEC3 makes offline zone enumeration attacks
more difficult but not impossible.  Dictionary attacks on offline
signing with NSEC3 have been demonstrated (<xref target="nsec3walker"/>,
<xref target="nsec3gpu"/>), and available as part of network reconnaissance tools
(<xref target="nmap-nsec3-enum"/>, <xref target="nsec3map"/>).</t>

<t>An alternative online signing approach requires the authoritative
server to hold the private zone-signing key and use this key to
synthesize NSEC or NSEC3 responses on the fly. When online signing
with NSEC3 White Lies (NSEC3-WL) <xref target="RFC7129"/> is used, the synthesized
NSEC3 record containing a pair of hash values, where the first is hash
of query minus one, and the second is the hash of the query plus
one. A similar approach is used in online signing with
Minimally-Covering NSEC records <xref target="RFC7129"/>. Both approaches prevent
offline zone enumeration because the synthesized NSEC or NSEC3 record
only contains information about the queried name, and does not contain
information about names that are present in the zone.  However, both
approaches fail to provide integrity in the face of a compromised
authoritative nameserver, because the authoritative nameserver holds
the private zone-signing key.</t>

<t>To prevent offline zone enumeration while still preserving integrity
against a compromised authoritative nameserver, NSEC5 replaces the
unkeyed cryptographic hash function used in NSEC3 with a Verifiable
Random Function (VRF) <xref target="MRV99"/>.  A VRF is essentially the public-key
version of a keyed cryptographic hash. The VRF comes with a
public-private key pair. Only the holder of the private VRF key can
compute the hash, but anyone with public VRF key can verify the
correctness of the hash.</t>

<t>Hashing in NSEC5 is performed with the VRF key. The public VRF key PK
is distributed in an NSEC5KEY RR, and is used to validate NSEC5 hash
values.  The private VRF key SK is present on all authoritative
servers for the zone, and is used to compute hash values. Importantly,
the NSEC5KEY key cannot be used to modify the contents of the zone.
Thus, any compromise of the private NSEC5 key does not lead to a
compromise of zone contents. All that is lost is privacy against zone
enumeration, effectively downgrading the security of NSEC5 to that of
NSEC3.</t>

<t>For every query that elicilits a denying response, the authoratitive
nameserver hashes the query on-the-fly using the secret VRF key, and
then returns the corresponding precomputed NSEC5 record.  As such, the
nameserver must perform an online cryptographic computation for every
denying NSEC5 response.</t>

<t>Notice that online signing (e.g. NSEC3 White Lies) also has this
requirement.  This is not a coincidence: <xref target="nsec5"/> proved that any
solution that both (a) prevents offline zone enumeration and (b)
provides integrity, must necessarily use online cryptography. What is
interesting about NSEC5 is that it provides integrity even if the
nameserver is compromised.</t>

<t>This document specifies two variants of NSEC5: RSA-based NSEC5
elliptic curve crypto (EC)-based NSEC5. The cryptographic proof of
security for RSA-based NSEC is in <xref target="nsec5"/>.  The cryptographic proof
of security for EC-based NSEC is in <xref target="nsec5ecc"/>.</t>

<t>NSEC5 is not intended to replace NSEC or NSEC3. It is designed as an
alternative mechanism for authenticated denial of existence.</t>

</section>
<section anchor="requirements" title="Requirements">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, <xref target="RFC4035"/>, and subsequent RFCs that update them:
<xref target="RFC2136"/>, <xref target="RFC2181"/>, <xref target="RFC2308"/>, <xref target="RFC5155"/>, and
<xref target="RFC7129"/>.</t>

<t>The following terminology is used through this document:</t>

<t><list style="hanging">
  <t hangText='Base32hex:'>
  The "Base 32 Encoding with Extended Hex Alphabet" as specified in
<xref target="RFC4648"/>.  The padding characters ("=") are not used in NSEC5
specification.</t>
  <t hangText='Base64:'>
  The "Base 64 Encoding" as specified in <xref target="RFC4648"/>.</t>
  <t hangText='NSEC5 proof:'>
  VRF proof. A holder of the private key (e.g., authoritative server)
can compute the proof. Anyone knowing the public key (e.g., client)
can verify it's validity.</t>
  <t hangText='NSEC5 hash:'>
  A cryptographic hash (digest) of an NSEC5 proof.  If the NSEC5 proof
is known, anyone can compute and verify it's NSEC5 hash.</t>
  <t hangText='NSEC5 algorithm:'>
  A pair of algorithms used to compute NSEC5 proofs and NSEC5 hashes.</t>
</list></t>

</section>
</section>
<section anchor="backward-compatibility" title="Backward Compatibility">

<t>The specification describes a protocol change that is not backward
compatible with <xref target="RFC4035"/> and <xref target="RFC5155"/>.  NSEC5-unaware resolver will
fail to validate responses introduced by this document.</t>

<t>To prevent NSEC5-unaware resolvers from attempting to validate the
responses, new DNSSEC algorithms identifiers are introduced, the
identifiers alias with existing algorithm numbers.  The zones signed
according to this specification MUST use only these algorithm
identifiers, thus NSEC5-unaware resolvers will treat the zone as
insecure.</t>

<t>The new algorithm identifiers defined by this document are listed in
Section 15.</t>

</section>
<section anchor="how-nsec5-works" title="How NSEC5 Works">

<t>[TODO: This section to be updated to be consistent with the VRF
I-D.]</t>

<t>To prove non-existence of a domain name in a zone, NSEC uses a chain
built from domain names present in the zone.  NSEC3 replaces the
original domain names by their cryptographic hashes.  NSEC5 is very
similar to NSEC3, except that the cryptographic hash is replaced by
hashes computed using a verifiable random function (VRF).  A VRF is
essentially the public-key version of a keyed cryptographic hash.  A
VRF comes with a public/private key pair, and only the holder of the
private key can compute the hash, but anyone with public key can
verify the hash.</t>

<t>In NSEC5, the original domain name is hashed with the VRF:</t>

<t><list style="numbers">
  <t>First, the domain name is hashed using a VRF keyed with the NSEC5
private key; the result is called the NSEC5 proof.  Only an
authoritative server that knows the private NSEC5 key can compute
the NSEC5 proof.  Any client that knows the public NSEC5 key can
validate the NSEC5 proof.</t>
  <t>Second, the NSEC5 proof is hashed.  The result is called the NSEC5
hash value.  This hash can be computed by any party that knows the
input NSEC5 proof.</t>
</list></t>

<t>The NSEC5 hash determines the position of a domain name in an NSEC5
chain.  That is, all the NSEC5 hashes for a zone are sorted in their
canonical order, and each consecutive pair forms an NSEC5 RR.</t>

<t>To prove an non-existence of a particular domain name in response to a
query, the server computes the NSEC5 proof (using the private NSEC5
key) on the fly.  Then it uses the NSEC5 proof to compute the
corresponding NSEC5 hash.  It then identifies the NSEC5 RR that covers
the NSEC5 hash.  In the response message, the server returns the NSEC5
RR, it's corresponding signature (RRSIG RRset), and synthesized
NSEC5PROOF RR containing the NSEC5 proof it computed on the fly.</t>

<t>To validate the response, the client first uses the public NSEC5 key
(stored in the zone as an NSEC5KEY RR) to verify that the NSEC5 proof
corresponds with the domain name to be disproved.  Then, the client
computes the NSEC5 hash from the NSEC5 proof and checks that it is
covered by the NSEC5 RR.  Finally, it checks that the signature on the
NSEC5 RR is valid.</t>

</section>
<section anchor="nsec5-algorithms" title="NSEC5 Algorithms">

<t>The algorithms used for NSEC5 authenticated denial are independent of
the algorithms used for DNSSEC signing.  An NSEC5 algorithm defines
how the NSEC5 proof and the NSEC5 hash is computed and validated.</t>

<t>The input for the NSEC5 proof computation is an RR owner name in the
canonical form in the wire format and an NSEC5 private key; the output
is an octet string.</t>

<t>The input for the NSEC5 hash computation is the corresponding NSEC5
proof; the output is an octet string.</t>

<t>This document defines RSAFDH-SHA256-SHA256 NSEC5 algorithm as follows:</t>

<t><list style="symbols">
  <t>NSEC5 proof is computed using an RSA based Full Domain Hash (FDH)
signature with SHA-256 hash function used internally for input
preprocessing.  The signature and verification is formally
specified in Appendix A.</t>
  <t>NSEC5 hash is computed by hashing the NSEC5 proof with the SHA-256
hash function as specified in <xref target="RFC6234"/>.</t>
  <t>The public key format to be used in NSEC5KEY RR is defined in
Section 2 of <xref target="RFC3110"/> and thus is the same as the format used
to store RSA public keys in DNSKEY RRs.</t>
</list></t>

<t>This document defines EC-P256-SHA256 NSEC5 algorithm as follows:</t>

<t><list style="symbols">
  <t>NSEC5 proof is computed using an Elliptic Curve VRF with FIPS 186-3
P-256 curve.  The proof computation and verification is formally
specified in Appendix B.  The curve parameters are specified in
<xref target="FIPS-186-3"/> (Section D.1.2.3) and <xref target="RFC5114"/> (Section 2.6).</t>
  <t>NSEC5 hash is x-coordinate of the group element gamma from the NSEC5
proof (specified in Appendix B), encoded as a fixed-width 32-octet
unsigned integer in network byte order.  In practice, the hash is a
substring of the proof ranging from 2nd to 33th octet of the proof
inclusive.</t>
  <t>The public key format to be used in NSEC5KEY RR is defined in
Section 4 of <xref target="RFC6605"/> and thus is the same as the format used
to store ECDSA public keys in DNSKEY RRs.</t>
</list></t>

<t>This document defines EC-ED25519-SHA256 NSEC5 as follows:</t>

<t><list style="symbols">
  <t>NSEC5 proof is the same as with EC-P256-SHA256 but using Ed25519
elliptic curve with parameters defined in <xref target="RFC7748"/> (Section 4.1).</t>
  <t>NSEC5 hash is the same as with EC-P256-SHA256.</t>
  <t>The public key format to be used in NSEC5KEY RR is defined in
Section 3 of <xref target="RFC8080"/> and thus is the same as the format used to
store Ed25519 public keys in DNSKEY RRs.</t>
</list></t>

</section>
<section anchor="the-nsec5key-resource-record" title="The NSEC5KEY Resource Record">

<t>The NSEC5KEY RR stores an NSEC5 public key.  The key allows clients to
verify a validity of NSEC5 proof sent by a server.</t>

<section anchor="nsec5key-rdata-wire-format" title="NSEC5KEY RDATA Wire Format">

<t>The RDATA for NSEC5KEY RR is as shown below:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Algorithm   |                  Public Key                   /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Algorithm is a single octet identifying NSEC5 algorithm.</t>

<t>Public Key is a variable sized field holding public key material for
NSEC5 proof verification.</t>

</section>
<section anchor="nsec5key-rdata-presentation-format" title="NSEC5KEY RDATA Presentation Format">

<t>The presentation format of the NSEC5KEY RDATA is as follows:</t>

<t>The Algorithm field is represented as an unsigned decimal integer.</t>

<t>The Public Key field is represented in Base64 encoding.  Whitespace is
allowed within the Base64 text.</t>

</section>
</section>
<section anchor="the-nsec5-resource-record" title="The NSEC5 Resource Record">

<t>The NSEC5 RR provides authenticated denial of existence for an RRset.
One NSEC5 RR represents one piece of an NSEC5 chain, proving existence
of RR types present at the original domain name and also non-existence
of other domain names in a part of the hashed domain name space.</t>

<section anchor="nsec5-rdata-wire-format" title="NSEC5 RDATA Wire Format">

<t>The RDATA for NSEC5 RR is as shown below:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            Key Tag            |     Flags     |  Next Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     Next Hashed Owner Name                    /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                         Type Bit Maps                         /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Key Tag field contains the key tag value of the NSEC5KEY RR that
validates the NSEC5 RR, in network byte order.  The value is computed
from the NSEC5KEY RDATA using the same algorithm, which is used to
compute key tag values for DNSKEY RRs.  The algorithm is defined in
<xref target="RFC4034"/>.</t>

<t>Flags field is a single octet.  The meaning of individual bits of the
field is defined in Section 6.2.</t>

<t>Next length is an unsigned single octet specifying the length of the
Next Hashed Owner Name field in octets.</t>

<t>Next Hashed Owner Name field is a sequence of binary octets.  It
contains an NSEC5 hash of the next domain name in the NSEC5 chain.</t>

<t>Type Bit Maps is a variable sized field encoding RR types present at
the original owner name matching the NSEC5 RR.  The format of the
field is equivalent to the format used in NSEC3 RR, described in
<xref target="RFC5155"/>.</t>

</section>
<section anchor="nsec5-flags-field" title="NSEC5 Flags Field">

<t>The following one-bit NSEC5 flags are defined:</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|           |W|O|
+-+-+-+-+-+-+-+-+

  O - Opt-Out flag

  W - Wildcard flag
]]></artwork></figure>

<t>All the other flags are reserved for future use and MUST be zero.</t>

<t>The Opt-Out flag has the same semantics as in NSEC3.  The definition
and considerations in <xref target="RFC5155"/> are valid, except that NSEC3 is
replaced by NSEC5.</t>

<t>The Wildcard flag indicates that a wildcard synthesis is possible at
the original domain name level (i.e., there is a wildcard node
immediately descending from the immediate ancestor of the original
domain name).  The purpose of the Wildcard flag is to reduce a maximum
number of RRs required for authenticated denial of existence proof, as
originally described in <xref target="I-D.gieben-nsec4"/> Section 7.2.1.</t>

</section>
<section anchor="nsec5-rdata-presentation-format" title="NSEC5 RDATA Presentation Format">

<t>The presentation format of the NSEC5 RDATA is as follows:</t>

<t>The Key Tag field is represented as an unsigned decimal integer.</t>

<t>The Flags field is represented as an unsigned decimal integer.</t>

<t>The Next Length field is not represented.</t>

<t>The Next Hashed Owner Name field is represented as a sequence of
case-insensitive Base32hex digits without any whitespace and without
padding.</t>

<t>The Type Bit Maps representation is equivalent to the representation
used in NSEC3 RR, described in <xref target="RFC5155"/>.</t>

</section>
</section>
<section anchor="the-nsec5proof-resource-record" title="The NSEC5PROOF Resource Record">

<t>The NSEC5PROOF record is synthesized by the authoritative server on-
the-fly.  The record contains the NSEC5 proof, proving a position of
the owner name in an NSEC5 chain.</t>

<section anchor="nsec5proof-rdata-wire-format" title="NSEC5PROOF RDATA Wire Format">

<t>The RDATA for NSEC5PROOF is as as shown below:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            Key Tag            |        Owner Name Hash        /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Key Tag field contains the key tag value of the NSEC5KEY RR that
validates the NSEC5PROOF RR, in network byte order.</t>

<t>Owner Name Hash is a variable sized sequence of binary octets encoding
the NSEC5 proof of the owner name of the RR.</t>

</section>
<section anchor="nsec5proof-rdata-presentation-format" title="NSEC5PROOF RDATA Presentation Format">

<t>The presentation format of the NSEC5PROOF RDATA is as follows:</t>

<t>The Key Tag field is represented as an unsigned decimal integer.</t>

<t>The Owner Name Hash is represented in Base64 encoding.  Whitespace is
allowed within the Base64 text.</t>

</section>
</section>
<section anchor="nsec5_proofs" title="Types of Authenticated Denial of Existence with NSEC5">

<t>This section summarizes all possible types of authenticated denial of
existence.  For each type the following lists are included:</t>

<t><list style="numbers">
  <t>Facts to prove.  The minimum amount of information an
authoritative server must provide to a client to assure the client
that the response content is valid.</t>
  <t>Authoritative server proofs.  NSEC5 RRs an authoritative server
must include in a response to prove the listed facts.</t>
  <t>Validator checks.  Individual checks a validating server is
required to perform on a response.  The response content is
considered valid only if all the checks pass.</t>
</list></t>

<t>If NSEC5 is said to match a domain name, the owner name of the NSEC5
RR has to be equivalent to an NSEC5 hash of that domain name.  If an
NSEC5 RR is said to cover a domain name, the NSEC5 hash of the domain
name must lay strictly between that NSEC5 RR's Owner Name and Next
Hashed Owner Name.</t>

<section anchor="name-error-responses" title="Name Error Responses">

<t>Facts to prove:</t>

<t>No RRset matching the QNAME exactly exists.</t>

<t>No RRset matching the QNAME via wildcard expansion exists.</t>

<t>The QNAME does not fall into a delegation.</t>

<t>The QNAME does not fall into a DNAME redirection.</t>

<t>Authoritative server proofs:</t>

<t>Closest encloser.</t>

<t>Next closer name.</t>

<t>Validator checks:</t>

<t>Closest encloser belongs to the zone.</t>

<t>Closest encloser has the Wildcard flag cleared.</t>

<t>Closest encloser does not have NS without SOA in the Type Bit Map.</t>

<t>Closest encloser does not have DNAME in the Type Bit Maps.</t>

<t>Next closer name is derived correctly.</t>

</section>
<section anchor="no-data-responses" title="No Data Responses">

<t>The processing of a No Data response for DS QTYPE differs if the Opt-
Out is in effect.  For DS QTYPE queries, the validator has two
possible checking paths.  The correct path can be simply decided by
inspecting if the NSEC5 RR in the response matches the QNAME.</t>

<t>Note that the Opt-Out is valid only for DS QTYPE queries.</t>

<section anchor="no-data-response-opt-out-not-in-effect" title="No Data Response, Opt-Out Not In Effect">

<t>Facts to prove:</t>

<t>An RRset matching the QNAME exists.</t>

<t>No QTYPE RRset matching the QNAME exists.</t>

<t>No CNAME RRset matching the QNAME exists.</t>

<t>Authoritative server proofs:</t>

<t>QNAME.</t>

<t>Validator checks:</t>

<t>The NSEC5 RR exactly matches the QNAME.</t>

<t>The NSEC5 RR does not have QTYPE in the Type Bit Map.</t>

<t>The NSEC5 RR does not have CNAME in the Type Bit Map.</t>

</section>
<section anchor="no-data-response-opt-out-in-effect" title="No Data Response, Opt-Out In Effect">

<t>Facts to prove:</t>

<t>The delegation is not covered by the NSEC5 chain.</t>

<t>Authoritative server proofs:</t>

<t>Closest provable encloser.</t>

<t>Validator checks:</t>

<t>Closest provable encloser is in zone.</t>

<t>Closest provable encloser covers (not matches) the QNAME.</t>

<t>Closest provable encloser has the Opt-Out flag set.</t>

</section>
</section>
<section anchor="wildcard-responses" title="Wildcard Responses">

<t>Facts to prove:</t>

<t>No RRset matching the QNAME exactly exists.</t>

<t>No wildcard closer to the QNAME exists.</t>

<t>Authoritative server proofs:</t>

<t>Next closer name.</t>

<t>Validator checks:</t>

<t>Next closer name is derived correctly.</t>

<t>Next closer name covers (not matches).</t>

</section>
<section anchor="wildcard-no-data-responses" title="Wildcard No Data Responses">

<t>Facts to prove:</t>

<t>No RRset matching the QNAME exactly exists.</t>

<t>No QTYPE RRset exists at the wildcard matching the QNAME.</t>

<t>No CNAME RRset exists at the wildcard matching the QNAME.</t>

<t>No wildcard closer to the QNAME exists.</t>

<t>Authoritative server proofs:</t>

<t>Source of synthesis (i.e., wildcard at closest encloser).</t>

<t>Next closer name.</t>

<t>Validator checks:</t>

<t>Source of synthesis matches exactly the QNAME.</t>

<t>Source of synthesis does not have QTYPE in the Type Bit Map.</t>

<t>Source of synthesis does not have CNAME in the Type Bit Map.</t>

<t>Next closer name is derived correctly.</t>

<t>Next closer name covers (not matches).</t>

</section>
</section>
<section anchor="authoritative-server-considerations" title="Authoritative Server Considerations">

<section anchor="zone-signing" title="Zone Signing">

<t>Zones using NSEC5 MUST satisfy the same properties as described in
Section 7.1 of <xref target="RFC5155"/>, with NSEC3 replaced by NSEC5.  In addition,
the following conditions MUST be satisfied as well:</t>

<t><list style="symbols">
  <t>If the original owner name has a wildcard label immediately
descending from the original owner name, the corresponding NSEC5 RR
MUST have the Wildcard flag set in the Flags field.  Otherwise, the
flag MUST be cleared.</t>
  <t>The zone apex MUST include an NSEC5KEY RRset containing a NSEC5
public key allowing verification of the current NSEC5 chain.</t>
</list></t>

<t>The following steps describe one possible method to properly add
required NSEC5 related records into a zone.  This is not the only
such existing method.</t>

<t><list style="numbers">
  <t>Select an algorithm for NSEC5.  Generate the public and private
NSEC5 keys.</t>
  <t>Add a NSEC5KEY RR into the zone apex containing the public NSEC5
key.</t>
  <t>For each unique original domain name in the zone and each empty
non-terminal, add an NSEC5 RR.  If Opt-Out is used, owner names
of unsigned delegations MAY be excluded.  <list style="numbers">
      <t>The owner name of the NSEC5 RR is the NSEC5 hash of the
original owner name encoded in Base32hex without padding,
prepended as a single label to the zone name.</t>
      <t>Set the Key Tag field to be the key tag corresponding to the
public NSEC5 key.</t>
      <t>Clear the Flags field.  If Opt-Out is being used, set the
Opt-Out flag.  If there is a wildcard label directly
descending from the original domain name, set the Wildcard
flag.  Note that the wildcard can be an empty non-terminal
(i.e., the wildcard synthesis does not take effect and
therefore the flag is not to be set).</t>
      <t>Set the Next Length field to a value determined by the used
NSEC5 algorithm.  Leave the Next Hashed Owner Name field
blank.</t>
      <t>Set the Type Bit Maps field based on the RRsets present at
the original owner name.</t>
    </list></t>
  <t>Sort the set of NSEC5 RRs into canonical order.</t>
  <t>For each NSEC5 RR, set the Next Hashed Owner Name field by using
the owner name of the next NSEC5 RR in the canonical order.  If
the updated NSEC5 is the last NSEC5 RR in the chain, the owner
name of the first NSEC5 RR in the chain is used instead.</t>
</list></t>

<t>The NSEC5KEY and NSEC5 RRs MUST have the same class as the zone SOA
RR.  Also the NSEC5 RRs SHOULD have the same TTL value as the SOA
minimum TTL field.</t>

<t>Notice that a use of Opt-Out is not indicated in the zone.  This does
not affect the ability of a server to prove insecure delegations.  The
Opt-Out MAY be part of the zone-signing tool configuration.</t>

</section>
<section anchor="precomputing-closest-provable-encloser-proofs" title="Precomputing Closest Provable Encloser Proofs">

<t>The worst-case scenario when answering a negative query with NSEC5
requires authoratitive nameserver to respond with two NSEC5PROOF RRs
and two NSEC5 RRs. Per <xref target="nsec5_proofs"/>, one pair of NSEC5PROOF and
NSEC5 RRs corresponds to the closest provable encloser, and the other
pair corresponds to the next closer name.  The NSEC5PROOF
corresponding to the next closer MUST be computed on-the-fly by the
authoratitive nameserver when responding to the query. However,
NSEC5PROOF corresponding to the closest provable encloser SHOULD be
precomputed and stored as part of zone signing.</t>

<t>The following steps describe one possible method to properly
precompute NSEC5PROOF corresponding to the closest provable encloser.
This is not the only such existing method.</t>

<t><list style="numbers">
  <t>For each unique original domain name in the zone and each empty
non-terminal, add an NSEC5PROOF RR. If Opt-Out is used, owner names of
unsigned delegations MAY be excluded.  <list style="numbers">
      <t>The Owner Name Hash is the NSEC5 proof for the domain name
 encoded in Base32hex without padding.</t>
      <t>The Key Tag field is the key tag corresponding to the public
 NSEC5 key.</t>
    </list></t>
</list></t>

<t>Precomputing that NSEC5PROOF halves the number of online cryptographic
computations required when responding to a negative query. This
drastically reduces query processing time while slightly increasing
the used storage space at the authoritative.  It should be noted that
the precomputed NSEC5PROOF values do not need be part of the zone
explicitly and can be stored in an additional data structure.</t>

</section>
<section anchor="zone-serving" title="Zone Serving">

<t>This specification modifies DNSSEC-enabled DNS responses generated by
authoritative servers.  In particular, it replaces use of NSEC or
NSEC3 RRs in such responses with NSEC5 RRs and adds on-the-fly
computed NSEC5PROOF RRs.</t>

<t>The authenticated denial of existence proofs in NSEC5 are almost the
same as in NSEC3.  However, due to introduction of Wildcard flag in
NSEC5 RRs, the NSEC5 proof consists from (up to) two NSEC5 RRs,
instead of (up to) three.</t>

<t>According to a type of a response, an authoritative server MUST
include NSEC5 RRs in a response as defined in <xref target="nsec5_proofs"/>.  For
each NSEC5 RR in the response a matching RRSIG RRset and an NSEC5PROOF
MUST be added as well.</t>

<t>The NSEC5PROOF RR has the owner name set to a domain name exactly
matching the name required for the proof.  The class and TTL of the RR
MUST be the same as the class and TTL value of the corresponding NSEC5
RR.  The RDATA are set according to the description in Section 7.1.</t>

<t>Notice, that the NSEC5PROOF owner name can be a wildcard (e.g., source
of synthesis proof in wildcard No Data responses).  The name also
always matches the domain name required for the proof while the NSEC5
RR may only cover (not match) the name in the proof (e.g., closest
encloser in Name Error responses).</t>

<t>If NSEC5 is used, an answering server MUST use exactly one NSEC5 chain
for one signed zone.</t>

<t>NSEC5 MUST NOT be used in parallel with NSEC, NSEC3, or any other
authenticated denial of existence mechanism that allows for
enumeration of zone contents, as that would defeat the principal
security goal of NSEC5.</t>

<t>Similarly to NSEC3, the owner names of NSEC5 RRs are not represented
in the NSEC5 chain and therefore NSEC5 records deny their own
existence.  The desired behavior caused by this paradox is the same as
described in Section 7.2.8 of <xref target="RFC5155"/>.</t>

</section>
<section anchor="nsec5key-rollover-mechanism" title="NSEC5KEY Rollover Mechanism">

<t>Replacement of the NSEC5 key implies generating a new NSEC5 chain.
The NSEC5KEY rollover mechanism is similar to "Pre-Publish Zone
Signing Key Rollover" as specified in <xref target="RFC6781"/>.  The NSEC5KEY
rollover MUST be performed as a sequence of the following steps:</t>

<t><list style="numbers">
  <t>A new public NSEC5 key is added into the NSEC5KEY RRset in the
zone apex.</t>
  <t>The old NSEC5 chain is replaced by a new NSEC5 chain constructed
using the new key.  This replacement MUST happen as a single
atomic operation; the server MUST NOT be responding with RRs from
both the new and old chain at the same time.</t>
  <t>The old public key is removed from the NSEC5KEY RRset in the zone
apex.</t>
</list></t>

<t>The minimal delay between the steps 1. and 2.  MUST be the time it
takes for the data to propagate to the authoritative servers, plus the
TTL value of the old NSEC5KEY RRset.</t>

<t>The minimal delay between the steps 2. and 3.  MUST be the time it
takes for the data to propagate to the authoritative servers, plus the
maximum zone TTL value of any of the data in the previous version of
the zone.</t>

</section>
<section anchor="secondary-servers" title="Secondary Servers">

<t>This document does not define mechanism to distribute NSEC5 private
keys.  See Section 14.3 for discussion on the security requirements
for NSEC5 private keys.</t>

</section>
<section anchor="zones-using-unknown-hash-algorithms" title="Zones Using Unknown Hash Algorithms">

<t>Zones that are signed with unknown NSEC5 algorithm or by an
unavailable NSEC5 private key cannot be effectively served.  Such
zones SHOULD be rejected when loading and servers SHOULD respond with
RCODE=2 (Server failure) when handling queries that would fall under
such zones.</t>

</section>
<section anchor="dynamic-updates" title="Dynamic Updates">

<t>A zone signed using NSEC5 MAY accept dynamic updates <xref target="RFC2136"/>.  The
changes to the zone MUST be performed in a way, that the zone
satisfies the properties specified in Section 9.1 at any time.  The
process described in <xref target="RFC5155"/> Section 7.5 describes how to handle
the issues surrouding the handling of empty non-terminals as well as
Opt-Out.</t>

<t>It is RECOMMENDED that the server rejects all updates containing
changes to the NSEC5 chain (or related RRSIG RRs) and performs itself
any required alternations of the NSEC5 chain induced by the update.</t>

<t>Alternatively, the server MUST verify that all the properties are
satisfied prior to performing the update atomically.</t>

</section>
</section>
<section anchor="resolver-considerations" title="Resolver Considerations">

<t>The same considerations as described in Section 9 of <xref target="RFC5155"/> for
NSEC3 apply to NSEC5.  In addition, as NSEC5 RRs can be validated only
with appropriate NSEC5PROOF RRs, the NSEC5PROOF RRs MUST be all
together cached and included in responses with NSEC5 RRs.</t>

</section>
<section anchor="validator-considerations" title="Validator Considerations">

<section anchor="validating-responses" title="Validating Responses">

<t>The validator MUST ignore NSEC5 RRs with Flags field values other than
the ones defined in Section 6.2.</t>

<t>The validator MAY treat responses as bogus if the response contains
NSEC5 RRs that refer to a different NSEC5KEY.</t>

<t>According to a type of a response, the validator MUST verify all
conditions defined in <xref target="nsec5_proofs"/>.  Prior to making decision based on
the content of NSEC5 RRs in a response, the NSEC5 RRs MUST be
validated.</t>

<t>To validate a denial of existence, zone NSEC5 public keys are required
in addition to DNSSEC public keys.  Similarly to DNSKEY RRs, the
NSEC5KEY RRs are present in the zone apex.</t>

<t>The NSEC5 RR is validated as follows:</t>

<t><list style="numbers">
  <t>Select a correct NSEC5 public key to validate the NSEC5PROOF.  The
Key Tag value of the NSEC5PROOF RR must match with the key tag
value computed from the NSEC5KEY RDATA.</t>
  <t>Validate the NSEC5 proof present in the NSEC5PROOF Owner Name Hash
field using the NSEC5 public key.  If there are multiple NSEC5KEY
RRs matching the key tag, at least one of the keys must validate
the NSEC5 proof.</t>
  <t>Compute the NSEC5 hash value from the NSEC5 proof and check if the
response contains NSEC5 RR matching or covering the computed NSEC5
hash.  The TTL values of the NSEC5 and NSEC5PROOF RRs must be the
same.</t>
  <t>Validate the signature of the NSEC5 RR.</t>
</list></t>

<t>If the NSEC5 RR fails to validate, it MUST be ignored.  If some of the
conditions required for an NSEC5 proof is not satisfied, the response
MUST be treated as bogus.</t>

<t>Notice that determining closest encloser and next closer name in NSEC5
is easier than in NSEC3.  NSEC5 and NSEC5PROOF RRs are always present
in pairs in responses and the original owner name of the NSEC5 RR
matches the owner name of the NSEC5PROOF RR.</t>

</section>
<section anchor="validating-referrals-to-unsigned-subzones" title="Validating Referrals to Unsigned Subzones">

<t>The same considerations as defined in Section 8.9 of <xref target="RFC5155"/> for
NSEC3 apply to NSEC5.</t>

</section>
<section anchor="responses-with-unknown-hash-algorithms" title="Responses With Unknown Hash Algorithms">

<t>A validator MUST ignore NSEC5KEY RRs with unknown NSEC5 algorithms.
The practical result of this is that zones sighed with unknown
algorithms will be considered bogus.</t>

</section>
</section>
<section anchor="special-considerations" title="Special Considerations">

<section anchor="transition-mechanism" title="Transition Mechanism">

<t>TODO: Not finished.  Following information will be covered:</t>

<t>o Transition from NSEC or NSEC3.</t>

<t>o Transition from NSEC5 to NSEC/NSEC3</t>

<t>o Transition to new algorithms within NSEC5</t>

<t>Quick notes on transition from NSEC/NSEC3 to NSEC5:</t>

<t><list style="numbers">
  <t>Publish NSEC5KEY RR.</t>
  <t>Wait for data propagation to slaves and cache expiration.</t>
  <t>Instantly switch answering from NSEC/NSEC3 to NSEC5.</t>
</list></t>

<t>Quick notes on transition from NSEC5 to NSEC/NSEC3:</t>

<t><list style="numbers">
  <t>Instantly switch answering from NSEC5 to NSEC/NSEC3.</t>
  <t>Wait for NSEC5 RRs expiration in caches.</t>
  <t>Remove NSEC5KEY RR from the zone.</t>
</list></t>

</section>
<section anchor="nsec5-private-keys" title="NSEC5 Private Keys">

<t>This document does not define format to store NSEC5 private key.  Use
of standardized and adopted format is RECOMMENDED.</t>

<t>The NSEC5 private key MAY be shared between multiple zones, however a
separate key is RECOMMENDED for each zone.</t>

</section>
<section anchor="domain-name-length-restrictions" title="Domain Name Length Restrictions">

<t>The NSEC5 creates additional restrictions on domain name lengths.  In
particular, zones with names that, when converted into hashed owner
names exceed the 255 octet length limit imposed by <xref target="RFC1035"/>, cannot
use this specification.</t>

<t>The actual maximum length of a domain name depends on the length of
the zone name and used NSEC5 algorithm.</t>

<t>All NSEC5 algorithms defined in this document use 256-bit NSEC5 hash
values.  Such a value can be encoded in 52 characters in Base32hex
without padding.  When constructing the NSEC5 RR owner name, the
encoded hash is prepended to the name of the zone as a single label
which includes the length field of a single octet.  The maximal length
of the zone name in wire format is therefore 202 octets (255 - 53).</t>

</section>
</section>
<section anchor="performance-considerations" title="Performance Considerations">

<t>The performance of NSEC5 has been evaluated in <xref target="nsec5ecc"/>.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="zone-enumeration-attacks" title="Zone Enumeration Attacks">

<t>NSEC5 is robust to zone enumeration via offline dictionary attacks by
any attacker that does not know the NSEC5 private key.  Without the
private NSEC5 key, that attacker cannot compute the NSEC5 proof that
corresponds to a given name; the only way it can learn the NSEC5 proof
value for a given name is by sending a queries for that name to the
authoritative server.  Without the NSEC5 proof value, the attacker
cannot learn the NSEC5 hash value.  Thus, even an attacker that
collects the entire chain of NSEC5 RR for a zone cannot use offline
attacks to "reverse" that NSEC5 hash values in these NSEC5 RR and thus
learn which names are present in the zone.  A formal cryptographic
proof of this property is in <xref target="nsec5"/>.</t>

</section>
<section anchor="hash-collisions" title="Hash Collisions">

<t>Hash collisions between QNAME and the owner name of an NSEC5 RR may
occur.  When they do, it will be impossible to prove the non-
existence of the colliding QNAME.  However, with SHA-256, this is
highly unlikely (on the order of 1 in 2^128).  Note that DNSSEC
already relies on the presumption that a cryptographic hash function
is collision resistant, since these hash functions are used for
generating and validating signatures and DS RRs.  See also the
discussion on key lengths in <xref target="nsec5"/>.</t>

</section>
<section anchor="compromise-of-the-private-nsec5-key" title="Compromise of the Private NSEC5 Key">

<t>NSEC5 requires authoritative servers to hold the private NSEC5 key,
but not the private zone-signing keys or the private key-signing keys
for the zone.</t>

<t>The private NSEC5 key needs only be as secure as the DNSSEC records
whose the privacy (against zone-enumeration attacks) that NSEC5 is
protecting.  This is because even an adversary that knows the private
NSEC5 key cannot modify the contents of the zone; this is because the
zone contents are signed using the private zone-signing key, while the
private NSEC5 key is only used to compute NSEC5 proof values.  Thus, a
compromise of the private NSEC5 keys does not lead to a compromise of
the integrity of the DNSSEC record in the zone; instead, all that is
lost is privacy against zone enumeration, if the attacker that knows
the private NSEC5 key can compute NSEC5 hashes offline, and thus
launch offline dictionary attacks.  Thus, a compromise of the private
NSEC5 key effectively downgrades the security of NSEC5 to that of
NSEC3.  A formal cryptographic proof of this property is in <xref target="nsec5"/>.</t>

<t>If a zone owner wants to preserve this property of NSEC5, the zone
owner SHOULD choose the NSEC5 private key to be different from the
private zone-signing keys or key-signing keys for the zone.</t>

</section>
<section anchor="key-length-considerations" title="Key Length Considerations">

<t>The NSEC5 key must be long enough to withstand attacks for as long as
the privacy of the zone is important.  Even if the NSEC5 key is rolled
frequently, its length cannot be too short, because zone privacy may
be important for a period of time longer than the lifetime of the key.
(For example, an attacker might collect the entire chain of NSEC5 RR
for the zone over one short period, and then, later (even after the
NSEC5 key expires) perform an offline dictionary attack that attempt
to "reverse" the NSEC5 hash values present in the NSEC5 RRs.)  This is
in contrast to zone-signing and key-signing keys used in DNSSEC; these
keys, which ensure the authenticity and integrity of the zone contents
need to remain secure only during their lifetime.</t>

</section>
<section anchor="transitioning-to-a-new-nsec5-algorithm" title="Transitioning to a New NSEC5 Algorithm">

<t>Although the NSEC5KEY RR formats include a hash algorithm parameter,
this document does not define a particular mechanism for safely
transitioning from one NSEC5 algorithm to another.  When specifying a
new hash algorithm for use with NSEC5, a transition mechanism MUST
also be defined.  It is possible that the only practical and palatable
transition mechanisms may require an intermediate transition to an
insecure state, or to a state that uses NSEC or NSEC3 records instead
of NSEC5.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document updates the IANA registry "Domain Name System (DNS)
Parameters" in subregistry "Resource Record (RR) TYPEs", by defining
the following new RR types:</t>

<t>NSEC5KEY value TBD.</t>

<t>NSEC5 value TBD.</t>

<t>NSEC5PROOF value TBD.</t>

<t>This document creates a new IANA registry for NSEC5 algorithms.  This
registry is named "DNSSEC NSEC5 Algorithms".  The initial content of
the registry is:</t>

<t>0 is Reserved.</t>

<t>1 is RSAFDH-SHA256-SHA256.</t>

<t>2 is EC-P256-SHA256.</t>

<t>3 is EC-ED25519-SHA256.</t>

<t>4-255 is Available for assignment.</t>

<t>This document updates the IANA registry "DNS Security Algorithm
Numbers" by defining following aliases:</t>

<t>TBD is NSEC5-RSASHA256, alias for RSASHA256 (8).</t>

<t>TBD is NSEC5-RSASHA512, alias for RSASHA512 (10).</t>

<t>TBD is NSEC5-ECDSAP256SHA256, alias for ECDSAP256SHA256 (13).</t>

<t>TBD is NSEC5-ECDSAP384SHA384, alias for ECDSAP384SHA384 (14).</t>

<t>TBD is NSEC5-ED25519, alias for ED25519 (15).</t>

</section>
<section anchor="implementation-status" title="Implementation Status">

<t>NSEC5 has been implemented for the Knot Authoritative server and the
Unbound recursive server.</t>

</section>
<section anchor="contributors" title="Contributors">

<t>This document would not be possible without help of Moni Naor
(Weizmann Institute), Sachin Vasant (Cisco Systems), Leonid Reyzin
(Boston University), and Asaf Ziv (Weizmann Institute) who contributed
to the design of NSEC5; Ondrej Sury (CZ.NIC Labs) who provided advice
on its implementation; and Duane Wessels (Verisign Labs) who assisted
in the research of the practicality of NSEC5.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="FIPS-186-3" >
  <front>
    <title>Digital Signature Standard (DSS)</title>
    <author >
      <organization>National Institute for Standards and Technology</organization>
    </author>
    <date year="2009" month="June"/>
  </front>
  <seriesInfo name="FIPS" value="PUB 186-3"/>
</reference>
<reference anchor="SECG1" target="http://www.secg.org/sec1-v2.pdf">
  <front>
    <title>SEC 1: Elliptic Curve Cryptography</title>
    <author >
      <organization>Standards for Efficient Cryptography Group (SECG)</organization>
    </author>
    <date />
  </front>
  <seriesInfo name="Version" value="2.0"/>
</reference>
&RFC5155;
&RFC4034;
&RFC2119;
&RFC1034;
&RFC1035;
&RFC4033;
&RFC4035;
&RFC2136;
&RFC2181;
&RFC2308;
&RFC4648;
&RFC6234;
&RFC3110;
&RFC5114;
&RFC6605;
&RFC7748;
&RFC8080;
&RFC3447;


    </references>

    <references title='Informative References'>

<reference anchor="nsec5" >
  <front>
    <title>NSEC5: Provably Preventing DNSSEC Zone Enumeration</title>
    <author initials="S." surname="Goldberg">
      <organization></organization>
    </author>
    <author initials="M." surname="Naor">
      <organization></organization>
    </author>
    <author initials="D." surname="Papadopoulos">
      <organization></organization>
    </author>
    <author initials="L." surname="Reyzin">
      <organization></organization>
    </author>
    <author initials="S." surname="Vasant">
      <organization></organization>
    </author>
    <author initials="A." surname="Ziv">
      <organization></organization>
    </author>
    <date />
  </front>
  <seriesInfo name="in" value="NDSS'15"/>
</reference>
<reference anchor="nsec5ecc" target="https://eprint.iacr.org/2017/099.pdf">
  <front>
    <title>Can NSEC5 be Practical for DNSSEC Deployments?</title>
    <author initials="D." surname="Papadopoulos">
      <organization></organization>
    </author>
    <author initials="D." surname="Wessels">
      <organization></organization>
    </author>
    <author initials="S." surname="Huque">
      <organization></organization>
    </author>
    <author initials="J." surname="Vcelak">
      <organization></organization>
    </author>
    <author initials="M." surname="Naor">
      <organization></organization>
    </author>
    <author initials="L." surname="Reyzin">
      <organization></organization>
    </author>
    <author initials="S." surname="Goldberg">
      <organization></organization>
    </author>
    <date />
  </front>
  <seriesInfo name="in" value="ePrint Cryptology Archive 2017/099"/>
</reference>
<reference anchor="nsec3gpu" >
  <front>
    <title>GPU-Based NSEC3 Hash Breaking</title>
    <author initials="M." surname="Wander">
      <organization></organization>
    </author>
    <author initials="L." surname="Schwittmann">
      <organization></organization>
    </author>
    <author initials="C." surname="Boelmann">
      <organization></organization>
    </author>
    <author initials="T." surname="Weis">
      <organization></organization>
    </author>
    <date />
  </front>
  <seriesInfo name="in" value="IEEE Symp. Network Computing and Applications (NCA)"/>
</reference>
<reference anchor="nsec3walker" target="http://dnscurve.org/nsec3walker.html">
  <front>
    <title>Nsec3 walker</title>
    <author initials="D." surname="Bernstein">
      <organization></organization>
    </author>
    <date />
  </front>
</reference>
<reference anchor="nmap-nsec-enum" target="https://nmap.org/nsedoc/scripts/dns-nsec-enum.html">
  <front>
    <title>nmap: dns-nsec-enum</title>
    <author initials="J.R." surname="Bond">
      <organization></organization>
    </author>
    <date />
  </front>
</reference>
<reference anchor="nmap-nsec3-enum" target="https://nmap.org/nsedoc/scripts/dns-nsec3-enum.html">
  <front>
    <title>nmap: dns-nsec3-enum</title>
    <author initials="J.R." surname="Bond">
      <organization></organization>
    </author>
    <author initials="A." surname="Nikolic">
      <organization></organization>
    </author>
    <date />
  </front>
</reference>
<reference anchor="nsec3map" target="https://github.com/anonion0/nsec3map">
  <front>
    <title>nsec3map with John the Ripper plugin</title>
    <author initials="." surname="anonion0" fullname="anonion0">
      <organization></organization>
    </author>
    <date />
  </front>
</reference>
<reference anchor="ldns-walk" target="http://git.nlnetlabs.nl/ldns/tree/examples/ldns-walk.c">
  <front>
    <title>ldns-walk</title>
    <author >
      <organization>NLNetLabs</organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="MRV99" >
  <front>
    <title>Verifiable Random Functions</title>
    <author initials="S." surname="Michali">
      <organization></organization>
    </author>
    <author initials="M." surname="Rabin">
      <organization></organization>
    </author>
    <author initials="S." surname="Vadhan">
      <organization></organization>
    </author>
    <date />
  </front>
  <seriesInfo name="in" value="FOCS"/>
</reference>
&RFC7129;
&I-D.gieben-nsec4;
&RFC6781;


    </references>


<section anchor="rsa-full-domain-hash-algorithm" title="RSA Full Domain Hash Algorithm">

<t>The Full Domain Hash (FDH) is a RSA-based scheme that allows
authentication of hashes using public-key cryptography.</t>

<t>In this document, the notation from <xref target="RFC3447"/> is used.</t>

<t>Used parameters:</t>

<figure><artwork><![CDATA[
  (n, e) - RSA public key

  K - RSA private key

  k - length of the RSA modulus n in octets
]]></artwork></figure>

<t>Fixed options:</t>

<figure><artwork><![CDATA[
  Hash - hash function to be used with MGF1
]]></artwork></figure>

<t>Used primitives:</t>

<t><list style="hanging">
  <t hangText='I2OSP -'>
  Coversion of a nonnegative integer to an octet string as defined in
Section 4.1 of <xref target="RFC3447"/></t>
  <t hangText='OS2IP -'>
  Coversion of an octet string to a nonnegative integer as defined in
Section 4.2 of <xref target="RFC3447"/></t>
  <t hangText='RSASP1 -'>
  RSA signature primitive as defined in Section 5.2.1 of <xref target="RFC3447"/></t>
  <t hangText='RSAVP1 -'>
  RSA verification primitive as defined in Section 5.2.2 of <xref target="RFC3447"/></t>
  <t hangText='MGF1 -'>
  Mask Generation Function based on a hash function as defined in
Section B.2.1 of <xref target="RFC3447"/></t>
</list></t>

<section anchor="fdh-signature" title="FDH signature">

<t>FDH_SIGN(K, M)</t>

<t>Input:</t>

<figure><artwork><![CDATA[
  K - RSA private key

  M - message to be signed, an octet string
]]></artwork></figure>

<t>Output:</t>

<figure><artwork><![CDATA[
  S - signature, an octet string of length k
]]></artwork></figure>

<t>Steps:</t>

<t><list style="numbers">
  <t>EM = MGF1(M, k - 1)</t>
  <t>m = OS2IP(EM)</t>
  <t>s = RSASP1(K, m)</t>
  <t>S = I2OSP(s, k)</t>
  <t>Output S</t>
</list></t>

</section>
<section anchor="fdh-verification" title="FDH verification">

<t>FDH_VERIFY((n, e), M, S)</t>

<t>Input:</t>

<figure><artwork><![CDATA[
  (n, e) - RSA public key

  M - message whose signature is to be verified, an octet string

  S - signature to be verified, an octet string of length k
]]></artwork></figure>

<t>Output:</t>

<figure><artwork><![CDATA[
  "valid signature" or "invalid signature"
]]></artwork></figure>

<t>Steps:</t>

<t><list style="numbers">
  <t>s = OS2IP(S)</t>
  <t>m = RSAVP1((n, e), s)</t>
  <t>EM = I2OSP(m, k - 1)</t>
  <t>EM' = MGF1(M, k - 1)</t>
  <t>If EM and EM' are the same, output "valid signature"; else output
"invalid signature".</t>
</list></t>

</section>
</section>
<section anchor="elliptic-curve-vrf" title="Elliptic Curve VRF">

<t>The Elliptic Curve Verifiable Random Function (VRF) is a EC-based
scheme that allows authentication of hashes using public-key
cryptography.</t>

<t>Fixed options:</t>

<figure><artwork><![CDATA[
  G - EC group
]]></artwork></figure>

<t>Used parameters:</t>

<figure><artwork><![CDATA[
  g^x - EC public key

  x - EC private key

  q - primer order of group G

  g - generator of group G
]]></artwork></figure>

<t>Used primitives:</t>

<t><list style="hanging">
  <t hangText='&quot;&quot; -'>
  empty octet string</t>
  <t hangText='|| -'>
  octet string concatenation</t>
  <t hangText='p^k -'>
  EC point multiplication</t>
  <t hangText='p1*p2 -'>
  EC point addition</t>
  <t hangText='SHA256 -'>
  hash function SHA-256 as specified in <xref target="RFC6234"/></t>
  <t hangText='ECP2OS -'>
  EC point to octet string conversion with point compression as
specified in Section 2.3.3 of <xref target="SECG1"/></t>
  <t hangText='OS2ECP -'>
  octet string to EC point conversion with point compression as
specified in Section 2.3.4 of <xref target="SECG1"/></t>
</list></t>

<section anchor="ecvrf-hash-to-curve" title="ECVRF Hash To Curve">

<t>ECVRF_hash_to_curve(m)</t>

<t>Input:</t>

<figure><artwork><![CDATA[
  m - value to be hashed, an octet string
]]></artwork></figure>

<t>Output:</t>

<figure><artwork><![CDATA[
  h - hashed value, EC point
]]></artwork></figure>

<t>Steps:</t>

<t><list style="numbers">
  <t>c = 0</t>
  <t>C = I2OSP(c, 4)</t>
  <t>xc = SHA256(m || C)</t>
  <t>p = 0x02 || xc</t>
  <t>If p is not a valid octet string representing encoded compressed
point in G:  <vspace blankLines='1'/>
A.  c = c + 1  <vspace blankLines='1'/>
B.  Go to step 2.</t>
  <t>h = OS2ECP(p)</t>
  <t>Output h</t>
</list></t>

</section>
<section anchor="ecvrf-auxiliary-functions" title="ECVRF Auxiliary Functions">

<section anchor="ecvrf-hash-points" title="ECVRF Hash Points">

<t>ECVRF_hash_points(p_1, p_2, &#8230;, p_n)</t>

<t>Input:</t>

<figure><artwork><![CDATA[
  p_x - EC point in G
]]></artwork></figure>

<t>Output:</t>

<figure><artwork><![CDATA[
  h - hash value, integer between 0 and 2^128-1
]]></artwork></figure>

<t>Steps:</t>

<t><list style="numbers">
  <t>P = ""</t>
  <t>for p in [p_1, p_2, &#8230; p_n]:
P = P || ECP2OS(p)</t>
  <t>h' = SHA256(P)</t>
  <t>h = OS2IP(first 16 octets of h')</t>
  <t>Output h</t>
</list></t>

</section>
<section anchor="ecvrf-proof-to-hash" title="ECVRF Proof To Hash">

<t>ECVRF_proof_to_hash(gamma)</t>

<t>Input:</t>

<figure><artwork><![CDATA[
  gamma - VRF proof, EC point in G with coordinates (x, y)
]]></artwork></figure>

<t>Output:</t>

<figure><artwork><![CDATA[
  beta - VRF hash, octet string (32 octets)
]]></artwork></figure>

<t>Steps:</t>

<t><list style="numbers">
  <t>beta = I2OSP(x, 32)</t>
  <t>Output beta</t>
</list></t>

<t>Note: Because of the format of compressed form of an elliptic curve,
the hash can be retrieved from an encoded gamma simply by omitting the
first octet of the gamma.</t>

</section>
<section anchor="ecvrf-decode-proof" title="ECVRF Decode Proof">

<t>ECVRF_decode_proof(pi)</t>

<t>Input:</t>

<figure><artwork><![CDATA[
  pi - VRF proof, octet string (81 octets)
]]></artwork></figure>

<t>Output:</t>

<figure><artwork><![CDATA[
  gamma - EC point

  c - integer between 0 and 2^128-1

  s - integer between 0 and 2^256-1
]]></artwork></figure>

<t>Steps:</t>

<t><list style="numbers">
  <t>let gamma', c', s' be pi split after 33-rd and 49-th octet</t>
  <t>gamma = OS2ECP(gamma')</t>
  <t>c = OS2IP(c')</t>
  <t>s = OS2IP(s')</t>
  <t>Output gamma, c, and s</t>
</list></t>

</section>
</section>
<section anchor="ecvrf-signing" title="ECVRF Signing">

<t>ECVRF_sign(g^x, x, alpha)</t>

<t>Input:</t>

<figure><artwork><![CDATA[
  g^x - EC public key

  x - EC private key

  alpha - message to be signed, octet string
]]></artwork></figure>

<t>Output:</t>

<figure><artwork><![CDATA[
  pi - VRF proof, octet string (81 octets)

  beta - VRF hash, octet string (32 octets)
]]></artwork></figure>

<t>Steps:</t>

<t><list style="numbers">
  <t>h = ECVRF_hash_to_curve(alpha)</t>
  <t>gamma = h^x</t>
  <t>choose a nonce k from [0, q-1]</t>
  <t>c = ECVRF_hash_points(g, h, g^x, h^x, g^k, h^k)</t>
  <t>s = k - c*q mod q</t>
  <t>pi = ECP2OS(gamma) || I2OSP(c, 16) || I2OSP(s, 32)</t>
  <t>beta = h2(gamma)</t>
  <t>Output pi and beta</t>
</list></t>

</section>
<section anchor="ecvrf-verification" title="ECVRF Verification">

<t>ECVRF_VERIFY(g^x, pi, alpha)</t>

<t>Input:</t>

<figure><artwork><![CDATA[
  g^x - EC public key

  pi - VRF proof, octet string

  alpha - message to verify, octet string
]]></artwork></figure>

<t>Output:</t>

<figure><artwork><![CDATA[
  "valid signature" or "invalid signature"

  beta - VRF hash, octet string (32 octets)
]]></artwork></figure>

<t>Steps:</t>

<t><list style="numbers">
  <t>gamma, c, s = ECVRF_decode_proof(pi)</t>
  <t>u = (g^x)^c * g^s</t>
  <t>h = ECVRF_hash_to_curve(alpha)</t>
  <t>v = gamma^c * h^s</t>
  <t>c' = ECVRF_hash_points(g, h, g^x, gamma, u, v)</t>
  <t>beta = ECVRF_proof_to_hash(gamma)</t>
  <t>If c and c' are the same, output "valid signature"; else output
"invalid signature".  Output beta.</t>
</list></t>

<t>[[CREF1: TODO: check validity of gamma before hashing --Jan]]</t>

</section>
</section>
<section anchor="change-log" title="Change Log">

<t>Note to RFC Editor: if this document does not obsolete an existing
RFC, please remove this appendix before publication as an RFC.</t>

<t><list style="hanging">
  <t hangText='pre 00 -'>
  initial version of the document submitted to mailing list only</t>
  <t hangText='00 -'>
  fix NSEC5KEY rollover mechanism, clarify NSEC5PROOF RDATA, clarify
inputs and outputs for NSEC5 proof and NSEC5 hash computation</t>
  <t hangText='01 -'>
  added Performance Considerations section</t>
  <t hangText='02 -'>
  Elliptic Curve based VRF for NSEC5 proofs; response sizes based on
empirical data</t>
  <t hangText='03 -'>
  Mention precomputed NSEC5PROOF Values in Performance Considerations
section</t>
  <t hangText='04 -'>
  Edit rationale, edit Zone Signing section to mention precomputed
NSEC5PROOFs, update Performance Considerations section.</t>
</list></t>

</section>
<section anchor="open-issues" title="Open Issues">

<t>Note to RFC Editor: please remove this appendix before publication as
an RFC.</t>

<t><list style="numbers">
  <t>Consider alternative way to signalize NSEC5 support.  The NSEC5
could use only one DNSSEC algorithm identifier, and the actual
algorithm to be used for signing can be the first octet in DNSKEY
public key field and RRSIG signature field.  Similar approach is used
by PRIVATEDNS and PRIVATEOID defined in <xref target="RFC4034"></xref>.</t>
  <t>How to add new NSEC5 hashing algorithm.  We will need to add new
DNSSEC algorithm identifiers again.</t>
  <t>NSEC and NSEC3 define optional steps for hash collisions
detection.  We don't have a way to avoid them if they really appear
(unlikely).  We would have to drop the signing key and generate a new
one.  Which cannot be done instantly.</t>
  <t>Write Special Considerations section.</t>
  <t>Contributor list has to be completed.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
P/aZgk1OkWWku14MGRDlOCaD/jfOnAljgMYAAA==

-->

</rfc>

